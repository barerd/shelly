#!/bin/sh -

BASENAME=$(basename $0)
[ "$BASENAME" != "shly" ] && DOWNLOADED=1;

if [ -z "$CIM_HOME" ]; then
    echo "Error: CIM_HOME is not set. Check the configuration of CIM." 1>&2
    echo "If you've never installed CIM, install it from https://github.com/KeenS/CIM first." 1>&2
    exit 1
fi

if [ ! "$LISP_IMPL" ]; then
    if [ -s "$CIM_HOME/config/current.$CIM_ID" ]; then
        . "$CIM_HOME/config/current.$CIM_ID"
        export LISP_IMPL
    else
        echo "Error: LISP_IMPL is not set." 1>&2
        exit 1
    fi
fi

case "$LISP_IMPL" in
    sbcl*)
        core_option="--core"
        eval_option="--eval"
        impl_cmd="--noinform"$'\n'"--no-sysinit"$'\n'"--no-userinit"$'\n'"--non-interactive"
        SBCL_HOME="$CIM_HOME/impls/$LISP_IMPL/lib/sbcl"
        export SBCL_HOME
        ;;
    ccl*)
        core_option="-I"
        eval_option="--eval"
        impl_cmd="--no-init"$'\n'"--quiet"$'\n'"--batch"
        ;;
    alisp*)
        core_option="-I"
        eval_option="-e"
        impl_cmd="--qq"
        ;;
    clisp*)
        core_option="-M"
        eval_option="-x"
        impl_cmd="-norc"$'\n'"--quiet"$'\n'"--silent"$'\n'"-on-error"$'\n'"exit"
        ;;
    ecl*)
        eval_option="-eval"
        impl_cmd="-norc"$'\n'"-q"
        ;;
    abcl*)
        eval_option="--eval"
        impl_cmd="--noinform"$'\n'"--noinit"$'\n'"--nosystem"$'\n'"--batch"
        ;;
    *)
        echo "Unknown lisp implementation $LISP_IMPL. Exit." >&2
        exit 1
        ;;
esac

LISP_BINARY="$CIM_HOME/bin/$LISP_IMPL"

: ${SHELLY_HOME:="$HOME/.shelly"}
load_config() {
    if [ -z "$SHELLY_VERSION" ]; then
        . "$SHELLY_HOME/config"
        export SHELLY_VERSION
    fi
}

dumped_core_path() {
    core_path="dumped-cores/$LISP_IMPL.core"
    if [ -f "$core_path" ]; then
        echo "$core_path"
    else
        echo "$SHELLY_HOME/$core_path"
    fi
}

#====================
# Options
#====================

init_cmd=
cmd=
main_cmd=

add_option() {
    if [ -z "$cmd" ]; then
        cmd="$1"$'\n'"$2"
    else
        cmd="$cmd"$'\n'"$1"$'\n'"$2"
    fi
}

add_eval_option() {
    add_option "$eval_option" "$1"
}

add_load_path() {
    add_eval_option "(shelly.util::add-load-path (list #P\"$1\"))"
}

load_library() {
    add_eval_option "(shelly.util::load-systems (list :$1))"
}

run_shelly_command() {
    list=
    for a in "$@"; do
        list="$list \"$a\""
    done
    if [ -z "$main_cmd" ]; then
        main_cmd="$eval_option"$'\n'"(shelly.core::interpret (list$list) :verbose $verbose)"
    else
        main_cmd="$main_cmd"$'\n'"$eval_option"$'\n'"(shelly.core::interpret (list$list) :verbose $verbose)"
    fi
}

load_quicklisp() {
    init_cmd="$init_cmd"$'\n'"$eval_option"$'\n'"(load \"$CIM_HOME/quicklisp/setup.lisp\")"
}

load_shelly() {
    if [ -z "$SHELLY_PATH" ]; then
        shelly_path="$SHELLY_HOME/shelly/"
    else
        shelly_path="$SHELLY_PATH"
    fi

    init_cmd="$eval_option"$'\n'"(require (quote asdf))"
    if [ -d "$shelly_path" ]; then
        init_cmd="$init_cmd"$'\n'"$eval_option"$'\n'"(push (truename \"$shelly_path\") asdf:*central-registry*)"
    fi
    load_quicklisp
    read -r -d '' cmd_load_shelly <<EOF
(let ((*standard-output* (make-broadcast-stream)) #+allegro(*readtable* (copy-readtable)))
  (handler-case #+quicklisp (ql:quickload :shelly) #-quicklisp (asdf:load-system :shelly)
    (#+quicklisp ql::system-not-found #-quicklisp asdf:missing-component (c)
     (format *error-output* "~&Error: ~A~&" c)
     #+quicklisp
     (format *error-output* "~&Try (ql:update-all-dists) to ensure your dist is up to date.~%")
     #+allegro (excl:exit 1 :quiet t)
     #+sbcl    (sb-ext:exit)
     #-(or allegro sbcl) (quit)))
  (values))
EOF
    cmd_load_shelly=$(echo $cmd_load_shelly | sed -e 's/\n/ /g')
    init_cmd="$init_cmd"$'\n'"$eval_option"$'\n'"$cmd_load_shelly"
    init_cmd="$init_cmd"$'\n'"$eval_option"$'\n'"(shelly.util::shadowing-use-package :shelly)"
}

load_core() {
    if [ -z "$core_option" ]; then
        echo "Although $LISP_IMPL doesn't support loading Lisp core, trying to load." 1>&1
        exit 1
    fi
    impl_cmd="$core_option"$'\n'"$1"$'\n'"$impl_cmd"
    load_quicklisp
}


#====================
# Main
#====================

verbose="nil"

if [ "$DOWNLOADED" = 1 ]; then
    action="install"
    run_shelly_command "install"
elif [ "$#" = 0 ]; then
    help=1
    action="shelly::help"
    run_shelly_command "shelly::help"
fi

for ARG; do
    case "$ARG" in
        --help|-h|help)
            action="shelly::help"
            if [ $# = 1 ]; then
                help=1
                run_shelly_command "shelly::help"
                shift
            else
                run_shelly_command "shelly::help" "\\\"$2\\\""
                shift 2
            fi
            break
            ;;
        -I)
            add_load_path "$2"
            shift 2
            ;;
        -I*)
            add_load_path $(echo $1 | sed -e 's/\-I//')
            shift
            ;;
        --load|-L)
            load_library "$2"
            shift 2
            ;;
        -L*)
            load_library $(echo $1 | sed -e 's/\-L//')
            shift
            ;;
        --version|-V)
            load_config
            echo "Shelly ver $SHELLY_VERSION"
            break
            ;;
        --verbose)
            verbose="t"
            shift
            ;;
        --debug)
            debug=1
            shift
            ;;
        --file|-f)
            shlyfile="$1"
            shift 2
            ;;
        -f*)
            shlyfile=$(echo $1 | sed -e 's/\-f//')
            shift
            ;;
        --*|-*)
            if [ "$1" != "-" ]; then
                echo "Unknown option '$1'."
                exit 1
            fi
            ;;
        *)
            action="$1"
            run_shelly_command "$@"
            break
            ;;
    esac
done

case "$action" in
    install)
        load_shelly
        ;;
    dump-core)
        load_shelly
        ;;
    *)
        dumped_core_path=$(dumped_core_path)
        if [ -z "$SHELLY_PATH" ] && [ "$core_option" ] && [ -f "$dumped_core_path" ]; then
            load_core "$dumped_core_path"
        else
            if [ -z "$SHELLY_PATH" ]; then
                case "$LISP_IMPL" in
                    sbcl*|clisp*|ccl*|alisp*)
                        echo "Warning: Core image wasn't found for $LISP_IMPL. It is probably slow, isn't it? Try \"shly dump-core\"." 1>&2
                        ;;
                esac
            fi

            load_shelly
        fi

        add_eval_option "(shelly.util::load-global-shlyfile)"
        if [ -z "$shlyfile" ]; then
            add_eval_option "(shelly.util::load-local-shlyfile)"
        else
            add_eval_option "(shelly.util::load-local-shlyfile #P\"$shlyfile\")"
        fi
        ;;
esac

main_cmd="$main_cmd"$'\n'"$eval_option"$'\n'"(shelly.util::terminate)"

IFS=$'\n'
cmd="$impl_cmd"$'\n'"$init_cmd"$'\n'"$cmd"$'\n'"$main_cmd"
if [ "$debug" = 1 ]; then
    cmd_for_debug=$(echo $cmd | sed -e "s/$'\n'/ /g")
    echo "$LISP_BINARY $cmd_for_debug"
fi
if [ "$help" = 1 ]; then
    cat <<EOF
Usage:
    $ shly [options] [atom...]

Options:
    -h, --help
        Show this help.

    -I [directory]
        Specify asdf:*central-registry* directory (several -I's allowed).

    -L, --load [library]
        Specify a library to be loaded before executing the expression
        (several -L's allowed).

    -V, --version
        Print the version of Shelly and exit.

    --verbose
        Print some informations.

    --debug
        This flag is for Shelly developers.

EOF
fi

if [ "$action" = "install" ]; then
    $LISP_BINARY $cmd || exit 1
    if expr "$SHELL" : '.*sh' > /dev/null 2>&1; then
        rc="SHELLY_HOME=$SHELLY_HOME; [ -s \"\$SHELLY_HOME/shelly/init.sh\" ] && . \"\$SHELLY_HOME/shelly/init.sh\""
        case "$SHELL" in
            */bash) rcfile="$HOME/.bashrc" ;;
            */zsh)  rcfile="$HOME/.zshrc" ;;
            */sh)   rcfile="$HOME/.profile" ;;
            *) ;;
        esac
    fi

    if [ -n "$rcfile" ] && [ -e "$rcfile" ]; then
        if grep -F "$rc" "$rcfile" > /dev/null 2>&1; then
            cat <<EOF

Your shell has already configured in $rcfile. Enjoy!
EOF
        else
            cat <<EOF

Adding the following settings into your $rcfile:

    $rc

EOF
            echo "$rc" >> "$rcfile"
            cat <<EOF
The configuration successed. Please reload your $rcfile. Enjoy!
EOF
        fi
    else
        cat <<EOF

Failed to detect your shell.
Add $SHELLY_HOME/bin to your PATH variable manually.
EOF
    fi
else
    exec "$LISP_BINARY" $cmd
fi
